name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: tite-5g00ev16-3003/final-project-arto-server
  FRONTEND_IMAGE_NAME: tite-5g00ev16-3003/final-project-arto-client

jobs:
  verification:
    runs-on: ubuntu-20.04

    timeout-minutes: 5

    steps:
      - name: Fetch code
        uses: actions/checkout@v4.1.1

      - name: Install Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "20.x"

      - name: Install the Server dependencies
        working-directory: ./server
        run: npm ci

      - name: Run Lint on Server
        working-directory: ./server
        run: npm run lint

      - name: Install MySQL server
        uses: shogo82148/actions-setup-mysql@v1.31.0
        with:
          mysql-version: "8.0"
          auto-start: true

      - name: Configure the MySQL server
        run: |
          mysql -u root -h 127.0.0.1 -e 'SELECT version()'
          mysql -h 127.0.0.1 -P 3306 -u root -e 'CREATE DATABASE test_db;'
          mysql -h 127.0.0.1 -P 3306 -u root -e 'SHOW DATABASES;'
          mysql -h 127.0.0.1 -P 3306 -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'password';"
          mysql -h 127.0.0.1 -P 3306 -u root -e 'FLUSH PRIVILEGES' -ppassword

      - name: Seed the database
        working-directory: ./db
        run: mysql -h 127.0.0.1 -P3306 -u root -ppassword test_db < init.sql

      - name: Create testing .env file from secret
        run: echo "${{ secrets.ENV_FILE_TEST }}" > ./server/.env

      - name: Run the server tests
        working-directory: ./server
        run: npm test

      - name: Install the Client dependencies
        working-directory: ./client
        run: npm ci

      - name: Run Lint on Client
        working-directory: ./client
        run: npm run lint

      - name: Run tests on Client
        working-directory: ./client
        run: npm test

  build:
    needs: ["verification"]
    timeout-minutes: 5

    # Only run if pushing to main
    if: ${{ github.event_name == 'push' }}

    runs-on: ubuntu-20.04
    permissions:
      contents: read
      packages: write

    steps:
      - name: Fetch code
        uses: actions/checkout@v4.1.1

      - name: Install Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version: "18"

      - name: Set up QEmu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build the Backend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"

      - name: Create production .env file from secret
        run: echo "${{ secrets.ENV_FILE_PROD }}" > ./client/.env

      - name: Build the Frontend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"

  deploy:
    needs: ["build"]
    timeout-minutes: 5
    runs-on: ubuntu-20.04

    permissions:
      contents: read
      packages: write

    steps:
      - name: Fetch code
        uses: actions/checkout@v4.1.1

      - name: Install OpenVPN and RSync
        run: |
          sudo apt update
          sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved rsync

      - name: Setup VPN config
        run: |
          echo "${{ secrets.VPN_PASSWORD }}" > secret.txt
          echo "${{ secrets.VPN_CONFIG }}" > config.ovpn

      - name: Connect VPN
        run: sudo openvpn --config config.ovpn --daemon --log vpn.log

      - name: Wait for a VPN connection
        timeout-minutes: 1
        run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 10; done

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY_PRIVATE }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts

      - name: Create and sync stack configuration
        run: |
          mkdir -p final_project
          cp docker-compose.yml final_project/docker-compose.yml
          mkdir -p final_project/db
          cp db/init.sql final_project/db/
          echo "${{ secrets.ENV_FILE_PROD }}" > final_project/.env
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}" >> final_project/.env
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}" >> final_project/.env
          rsync -r final_project "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"

      - name: Start containers via SSH
        run:
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}
          "
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
          cd final_project;
          docker-compose pull;
          docker-compose up -d;
          "

      - name: Kill VPN connection
        if: always()
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn

